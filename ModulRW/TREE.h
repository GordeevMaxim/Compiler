
/*
			      ФАЙЛ  TREE.H
	     Описание констант и  структур данных   */

/* Способ использования идентификатора: */
//#define TYPES      121   /* ТИП */
//#define CONSTS     122   /* КОНСТАНТА */
//#define VARS       123   /* ПЕРЕМЕННАЯ */
//#define PROCS      124   /* ПРОЦЕДУРА */
//#define FUNCS      125   /* ФУНКЦИЯ   */


union const_val  /* значение константы */
	{
		int intval,    /* целого типа */
			charval;   /* символьного типа */
		char *enumval;	/* перечислимого типа ( адрес в таблице имен ) */
		double realval;	/* вещественного типа */
	};


/*БОЛЬШАЯ ВАРИАНТНАЯ ЧАСТЬ ДЕСКРИПТОРА	ТИПА*/
union variapart
{ 
	/*для множеств, файлов, указателей*/
	struct typerec *basetype; // указатель на дескриптор базового типа set of ...

	/*для ограниченного типа*/
	struct lim
	{
		struct typerec *basetype; // указатель на дескриптор базового типа
		union  //мнимальная и максимальная константы. сейчас будем выбирать отдельно для перечисляемного и для символьного/целого
		{
			struct {char*min,*max;} enptrs; // для перечисляемого типа (понедельник, вторник, среда, четверг, пятница)
			struct {int min,max;} intptrs; // для целого и символьного типа
		} diapason; 
	}limtype;

	/*для перечисляемого типа*/
	struct reestrconsts *firstconst; // указатель на первый элемент списка констант

	/*для записей*/
	struct fieldreestr *fields;
};//конец объединения варианта для  дескриптора типа

/*СТРУКТУРА ДЕСКРИПТОРА ТИПА*/	
struct typerec
{  
	struct typerec *next; // указатель на следующий дескриптор типа
	unsigned typecode; //код типа
	union variapart casetype; // вариантная часть дескриптора
};
typedef struct typerec TYPEREC; // собствнно само объявление типа



/*доп. описания для варианта дескриптора*/
//перечисляемый тип
struct reestrconsts
{ // структура элемента списка констант 
	char *addrconsts; // адрес идентификатора в таблице имен
	struct reestrconsts *next; // указатель на след элемент
};
	//запись
struct fix
{ //описатель поля фиксированной части записи
	char *Name; //указатель на имя поля в Таблице Имен
	TYPEREC *Type; //указатель на дескриптор типа поля в Таблице Типов
	struct fix *next; //указатель на следующий описатель поля
};

struct sig
{ //описатель признака варианной части записи
	char *Name; //указатель на имя поля признака в Таблице Имен
	TYPEREC *Type; //указатель на дескриптор типа поля признака в Таблице Типов
	struct caseField *variants; //указатель на описатель вариантов
};

struct fieldreestr
{ //описатель списка полей (вот эта штука исп. в большом union. все остальное из записей в нее входит)
	struct fix* fixedfields; //указатель на описатели полей фиксированной части
	struct sig *sign; //указатель на описатель вариантной части
};

struct caseField
{ //описатель варианта
	struct constchain *firstconst; // указатель на список констант
	struct fieldreestr *fldlistl ;// указатель на описатель списка полей
	struct caseField *next; // указатель на следующий вариант
};
	
/*-------------------------------------------------------------------------------------------------------*/
/*СТРУКТУРА ВЕРШИНЫ ДЕРЕВА ИДЕНТЕФИКАТОРОВ*/

//структура описана в файле TREE.h
//union const_val //значение константы
//{
//	int intval; // для целого или символльного символьного типа
//	float realval; // для вещественного типа
//	char *charval; // для перечисляемого типа (адрес в таблице имен)
//};
struct idparam
{
	TYPEREC *typeparam; //  указатель на дескриптор типа
	int mettransf;
	struct idparam* linkparam;
};

struct treenode
{
	unsigned hashvalue; // значение hash-функции
	char *idname; // адрес имени в таблице имен. коллизии I курс. не помню
	unsigned usingclass;
	TYPEREC *idtype; //  указатель на дескриптор типа
	union
	{
		/*для CONST*/
		union const_val constvalue; // значение константы

		/*для процедур и функций*/
		struct
		 { 
			struct idparam  *param /* указатель  на информацию о параметрах */;
			int forw /* информация об опережающем описании */;
			int level;
		  } proc;

				
	} casenode;
	struct treenode *left;
	struct treenode *right;
};
typedef struct treenode NODE; // собствнно само объявление типа

/*-------------------------------------------------------------------------------------------------------*/
/* ЭЛЕМЕНТ СТЕКА ВЛОЖЕННЫХ ОБЛАСТЕЙ ДЕЙСТВИЯ*/
struct labellist
{ // стуктура метки
		int meanimg; // значение метки
		struct labellist *nextlabel; // указатель на следующий элемент списка
};


struct scope
{  
	struct treenode *firstlocal;//  указатель на Таблицу Имен
	TYPEREC *typechain; //указатель на Таблицу Типов
	struct labellist *labelpointer; // указатель на таблицу меток
	struct scope *enclosingscope; // указатель на элемент стека. на область непосредственно оббъемлющую данную (т.е. следующую)
};
typedef struct scope SCOPE;

/*-------------------------------------------------------------------------------------------------------*/
/*ДЛЯ VARDECLARATION*/
//элементы вспомогательного списка VAR a,b,c: .... для a,b,c  ибо мы еще не знаем их тип
struct listrec
{
	struct treenode *id_r; // адрес вершины таблицы идентефикаторов
	struct listrec *next; // адрес следующего элемента списка
};





